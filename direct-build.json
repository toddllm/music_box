{
  "name": "music-box-websocket-direct",
  "description": "Direct build of WebSocket server with ws-v2 tag",
  "source": {
    "type": "NO_SOURCE",
    "buildspec": "version: 0.2\nphases:\n  pre_build:\n    commands:\n      - echo Logging in to Amazon ECR...\n      - export REPO_URI=717984198385.dkr.ecr.us-east-1.amazonaws.com/music-box-realtime\n      - aws ecr get-login-password | docker login --username AWS --password-stdin \"$REPO_URI\"\n      - echo \"Building with tag ws-v2\"\n  build:\n    commands:\n      - echo Build started on `date`\n      - mkdir -p realtime-service\n      - |\n        cat > realtime-service/package.json << 'EOF'\n        {\n          \"name\": \"music-box-realtime-service\",\n          \"version\": \"1.0.0\",\n          \"type\": \"module\",\n          \"main\": \"server.js\",\n          \"scripts\": {\n            \"start\": \"node server.js\"\n          },\n          \"dependencies\": {\n            \"ws\": \"^8.17.0\"\n          },\n          \"engines\": {\n            \"node\": \">=20.0.0\"\n          }\n        }\n        EOF\n      - |\n        cat > realtime-service/server.js << 'SERVEREOF'\n        import http from 'http';\n        import { WebSocketServer } from 'ws';\n        import { randomUUID } from 'crypto';\n        \n        const PORT = process.env.PORT || 8080;\n        \n        // Health check server on 8081\n        const healthServer = http.createServer((req, res) => {\n          if (req.url === '/health') {\n            res.writeHead(200);\n            res.end('ok');\n          } else {\n            res.writeHead(404);\n            res.end();\n          }\n        });\n        healthServer.listen(8081, () => {\n          console.log(JSON.stringify({ evt: 'health_server_start', port: 8081 }));\n        });\n        \n        // Main HTTP server for WebSocket upgrades\n        const server = http.createServer((req, res) => {\n          res.writeHead(200, { 'Content-Type': 'application/json' });\n          res.end(JSON.stringify({\n            service: 'Music Box Realtime WebSocket Service',\n            status: 'ready',\n            protocol: 'WSS',\n            connections: wss.clients.size,\n            timestamp: new Date().toISOString()\n          }));\n        });\n        \n        // WebSocket server attached to HTTP server for proper upgrade\n        const wss = new WebSocketServer({ server, path: '/' });\n        \n        wss.on('connection', (ws, req) => {\n          const id = randomUUID();\n          console.log(JSON.stringify({ evt: 'ws_open', id, ip: req.socket.remoteAddress }));\n          \n          // Send welcome message\n          ws.send(JSON.stringify({\n            type: 'welcome',\n            clientId: id,\n            message: 'Connected to Music Box Realtime Service',\n            protocol: 'WSS',\n            timestamp: Date.now()\n          }));\n          \n          ws.on('message', async (data, isBinary) => {\n            try {\n              if (isBinary) {\n                console.log(JSON.stringify({ evt: 'binary_data', id, size: data.length }));\n                ws.send(JSON.stringify({ type: 'processing', message: 'Audio received' }));\n                return;\n              }\n              \n              const message = JSON.parse(data.toString());\n              console.log(JSON.stringify({ evt: 'message', id, type: message.type }));\n              \n              switch (message.type) {\n                case 'startSession':\n                  ws.send(JSON.stringify({\n                    type: 'sessionStarted',\n                    playerId: message.playerId,\n                    timestamp: Date.now()\n                  }));\n                  break;\n                case 'audioData':\n                  // Mock laughter detection\n                  if (Math.random() < 0.02) {\n                    ws.send(JSON.stringify({\n                      type: 'laughterDetected',\n                      data: {\n                        confidence: 0.7 + Math.random() * 0.3,\n                        laughterType: ['chuckling', 'giggling', 'loud_laughter'][Math.floor(Math.random() * 3)],\n                        intensity: 'moderate',\n                        timestamp: Date.now()\n                      }\n                    }));\n                  }\n                  break;\n                case 'ping':\n                  ws.send(JSON.stringify({ type: 'pong', timestamp: Date.now() }));\n                  break;\n                default:\n                  ws.send(JSON.stringify({ type: 'echo', original: message, timestamp: Date.now() }));\n              }\n            } catch (err) {\n              console.error(JSON.stringify({ evt: 'error', id, msg: err.message }));\n              ws.send(JSON.stringify({ type: 'error', error: err.message }));\n            }\n          });\n          \n          ws.on('close', (code, reason) => {\n            console.log(JSON.stringify({ evt: 'ws_close', id, code, reason: reason.toString() }));\n          });\n          \n          ws.on('error', (error) => {\n            console.log(JSON.stringify({ evt: 'ws_error', id, error: error.message }));\n          });\n        });\n        \n        // SIGTERM handler for graceful shutdown\n        process.on('SIGTERM', () => {\n          console.log(JSON.stringify({ evt: 'sigterm_received' }));\n          wss.close(() => {\n            console.log(JSON.stringify({ evt: 'websocket_server_closed' }));\n            process.exit(0);\n          });\n        });\n        \n        server.listen(PORT, () => {\n          console.log(JSON.stringify({ \n            evt: 'server_start', \n            port: PORT, \n            health_port: 8081,\n            timestamp: new Date().toISOString() \n          }));\n        });\n        SERVEREOF\n      - |\n        cat > realtime-service/Dockerfile << 'DOCKEREOF'\n        FROM node:20-alpine\n        \n        # Create non-root user\n        RUN addgroup -S app && adduser -S -g app app\n        USER app\n        \n        WORKDIR /home/app\n        \n        COPY --chown=app:app package*.json ./\n        RUN npm install --omit=dev\n        \n        COPY --chown=app:app . .\n        \n        EXPOSE 8080 8081\n        ENV NODE_ENV=production\n        \n        CMD [\"npm\", \"start\"]\n        DOCKEREOF\n      - echo Building Docker image with ws-v2 tag...\n      - cd realtime-service\n      - docker build -t $REPO_URI:ws-v2 .\n      - docker tag $REPO_URI:ws-v2 $REPO_URI:latest\n  post_build:\n    commands:\n      - echo Build completed on `date`\n      - echo Pushing the Docker image...\n      - docker push $REPO_URI:ws-v2\n      - docker push $REPO_URI:latest\n      - echo \"Successfully pushed $REPO_URI:ws-v2\"\n      - printf '[{\"name\":\"realtime\",\"imageUri\":\"%s\"}]' $REPO_URI:ws-v2 > ../imagedefinitions.json\n      - echo \"IMAGE_URI=$REPO_URI:ws-v2\" > ../image_meta.env\nartifacts:\n  files:\n    - imagedefinitions.json\n    - image_meta.env"
  },
  "artifacts": {
    "type": "NO_ARTIFACTS"
  },
  "environment": {
    "type": "LINUX_CONTAINER",
    "image": "aws/codebuild/standard:7.0",
    "computeType": "BUILD_GENERAL1_SMALL",
    "privilegedMode": true
  },
  "serviceRole": "arn:aws:iam::717984198385:role/codebuild-service-role"
}