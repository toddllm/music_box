{
  "containerDefinitions": [
    {
      "name": "realtime-service",
      "image": "node:20-alpine",
      "cpu": 0,
      "links": [],
      "portMappings": [
        {
          "containerPort": 8080,
          "hostPort": 8080,
          "protocol": "tcp"
        },
        {
          "containerPort": 8081,
          "hostPort": 8081,
          "protocol": "tcp"
        }
      ],
      "essential": true,
      "entryPoint": [],
      "command": [
        "sh",
        "-c",
        "echo \"const http = require(\\\"http\\\"); const WebSocket = require(\\\"ws\\\"); const server = http.createServer((req, res) => { res.writeHead(200, { \\\"Content-Type\\\": \\\"application/json\\\" }); res.end(JSON.stringify({ service: \\\"Music Box Realtime WebSocket Service\\\", status: \\\"ready\\\", connections: wss.clients.size })); }); const wss = new WebSocket.Server({ server }); wss.on(\\\"connection\\\", (ws) => { const clientId = \\\"client_\\\" + Math.random().toString(36).substring(7); console.log(\\\"Client connected:\\\", clientId); ws.send(JSON.stringify({ type: \\\"welcome\\\", clientId, message: \\\"Connected to Production WebSocket Service\\\" })); ws.on(\\\"message\\\", (data) => { try { const msg = JSON.parse(data); console.log(\\\"Received:\\\", msg.type); if (msg.type === \\\"startSession\\\") { ws.send(JSON.stringify({ type: \\\"sessionStarted\\\", playerId: msg.playerId })); } else if (msg.type === \\\"audioData\\\") { if (Math.random() < 0.05) { ws.send(JSON.stringify({ type: \\\"laughterDetected\\\", data: { confidence: Math.random(), laughterType: \\\"chuckling\\\", timestamp: Date.now() }})); } } else if (msg.type === \\\"ping\\\") { ws.send(JSON.stringify({ type: \\\"pong\\\" })); } } catch(e) { console.log(\\\"Invalid message\\\"); } }); ws.on(\\\"close\\\", () => console.log(\\\"Client disconnected:\\\", clientId)); }); server.listen(8080, () => console.log(\\\"Production WebSocket service on 8080\\\")); const health = http.createServer((req, res) => { res.writeHead(200); res.end(\\\"OK\\\"); }); health.listen(8081, () => console.log(\\\"Health check on 8081\\\"));\" > server.js && npm install ws && node server.js"
      ],
      "environment": [
        {
          "name": "AWS_REGION",
          "value": "us-east-1"
        },
        {
          "name": "SESSIONS_TABLE",
          "value": "music-box-realtime-sessions"
        },
        {
          "name": "NODE_ENV",
          "value": "production"
        }
      ],
      "environmentFiles": [],
      "mountPoints": [],
      "volumesFrom": [],
      "secrets": [],
      "dnsServers": [],
      "dnsSearchDomains": [],
      "extraHosts": [],
      "dockerSecurityOptions": [],
      "dockerLabels": {},
      "ulimits": [],
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/music-box-realtime",
          "awslogs-region": "us-east-1",
          "awslogs-stream-prefix": "ecs"
        },
        "secretOptions": []
      },
      "systemControls": [],
      "credentialSpecs": []
    }
  ],
  "family": "music-box-realtime-service",
  "taskRoleArn": "arn:aws:iam::717984198385:role/music-box-realtime-task-role",
  "executionRoleArn": "arn:aws:iam::717984198385:role/music-box-realtime-service-TaskExecutionRole-NXC5JJXKI5uK",
  "networkMode": "awsvpc",
  "volumes": [],
  "requiresCompatibilities": [
    "FARGATE"
  ],
  "cpu": "256",
  "memory": "512"
}
