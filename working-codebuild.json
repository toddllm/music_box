{
  "name": "music-box-websocket-build",
  "description": "Build proper WebSocket Docker image for Music Box Realtime Service",
  "source": {
    "type": "NO_SOURCE",
    "buildspec": "version: 0.2\nphases:\n  pre_build:\n    commands:\n      - echo Logging in to Amazon ECR...\n      - REPO_URI=717984198385.dkr.ecr.us-east-1.amazonaws.com/music-box-realtime\n      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPO_URI\n      - IMAGE_TAG=ws-$(date +%Y%m%d-%H%M%S)\n  build:\n    commands:\n      - echo Build started on `date`\n      - echo Creating WebSocket service files...\n      - mkdir -p realtime-service\n      - |\n        cat > realtime-service/package.json << 'EOF'\n        {\n          \"name\": \"music-box-realtime-service\",\n          \"version\": \"1.0.0\",\n          \"type\": \"module\",\n          \"main\": \"server.js\",\n          \"scripts\": {\n            \"start\": \"node server.js\"\n          },\n          \"dependencies\": {\n            \"ws\": \"^8.17.0\"\n          },\n          \"engines\": {\n            \"node\": \">=20.0.0\"\n          }\n        }\n        EOF\n      - |\n        cat > realtime-service/server.js << 'SERVEREOF'\n        import http from 'http';\n        import { WebSocketServer } from 'ws';\n        import { randomUUID } from 'crypto';\n        \n        const PORT = process.env.PORT || 8080;\n        \n        const healthServer = http.createServer((req, res) => {\n          if (req.url === '/health') {\n            res.writeHead(200);\n            res.end('ok');\n          } else {\n            res.writeHead(404);\n            res.end();\n          }\n        });\n        healthServer.listen(8081);\n        \n        const server = http.createServer((req, res) => {\n          res.writeHead(200, { 'Content-Type': 'application/json' });\n          res.end(JSON.stringify({\n            service: 'Music Box Realtime WebSocket Service',\n            status: 'ready',\n            protocol: 'WSS',\n            connections: wss.clients.size,\n            timestamp: new Date().toISOString()\n          }));\n        });\n        \n        const wss = new WebSocketServer({ server, path: '/' });\n        \n        wss.on('connection', (ws, req) => {\n          const id = randomUUID();\n          console.log(JSON.stringify({ evt: 'ws_open', id, ip: req.socket.remoteAddress }));\n          \n          ws.send(JSON.stringify({\n            type: 'welcome',\n            clientId: id,\n            message: 'Connected to Music Box Realtime Service',\n            protocol: 'WSS'\n          }));\n          \n          ws.on('message', async (data, isBinary) => {\n            try {\n              if (isBinary) {\n                console.log(JSON.stringify({ evt: 'binary_data', id, size: data.length }));\n                return;\n              }\n              \n              const message = JSON.parse(data.toString());\n              console.log(JSON.stringify({ evt: 'message', id, type: message.type }));\n              \n              switch (message.type) {\n                case 'startSession':\n                  ws.send(JSON.stringify({\n                    type: 'sessionStarted',\n                    playerId: message.playerId\n                  }));\n                  break;\n                case 'ping':\n                  ws.send(JSON.stringify({ type: 'pong' }));\n                  break;\n                default:\n                  ws.send(JSON.stringify({ type: 'echo', original: message }));\n              }\n            } catch (err) {\n              console.error(JSON.stringify({ evt: 'error', id, msg: err.message }));\n            }\n          });\n          \n          ws.on('close', (code, reason) =>\n            console.log(JSON.stringify({ evt: 'ws_close', id, code }))\n          );\n        });\n        \n        server.listen(PORT, () =>\n          console.log(JSON.stringify({ evt: 'server_start', port: PORT, health_port: 8081 }))\n        );\n        SERVEREOF\n      - |\n        cat > realtime-service/Dockerfile << 'DOCKEREOF'\n        FROM node:20-alpine\n        RUN addgroup -S app && adduser -S -g app app\n        USER app\n        WORKDIR /home/app\n        COPY --chown=app:app package*.json ./\n        RUN npm ci --omit=dev\n        COPY --chown=app:app . .\n        EXPOSE 8080 8081\n        ENV NODE_ENV=production\n        CMD [\"npm\", \"start\"]\n        DOCKEREOF\n      - echo Building the Docker image...\n      - cd realtime-service\n      - docker build -t $REPO_URI:$IMAGE_TAG .\n      - docker tag $REPO_URI:$IMAGE_TAG $REPO_URI:latest\n  post_build:\n    commands:\n      - echo Build completed on `date`\n      - echo Pushing the Docker image...\n      - docker push $REPO_URI:$IMAGE_TAG\n      - docker push $REPO_URI:latest\n      - echo Image pushed successfully\n      - echo \"IMAGE_URI=$REPO_URI:$IMAGE_TAG\" > ../image_meta.env\nartifacts:\n  files:\n    - image_meta.env"
  },
  "artifacts": {
    "type": "NO_ARTIFACTS"
  },
  "environment": {
    "type": "LINUX_CONTAINER",
    "image": "aws/codebuild/standard:7.0",
    "computeType": "BUILD_GENERAL1_SMALL",
    "privilegedMode": true,
    "environmentVariables": [
      {
        "name": "AWS_DEFAULT_REGION",
        "value": "us-east-1"
      }
    ]
  },
  "serviceRole": "arn:aws:iam::717984198385:role/codebuild-service-role"
}